#!/usr/bin/env python3

# Author: Raghu Rao <raghu.v.rao@gmail.com>


import argparse
import sys


def multiples_by_upper_limit(number, lower_limit, upper_limit, remainder):
    # This check is valid because we are dealing with only natural
    # numbers.
    if number <= remainder:
        return

    if upper_limit < number:
        return

    if lower_limit < number:
        lower_limit = number

    s = lower_limit - (lower_limit % number)
    m = s + remainder
    while m < lower_limit:
        m += number

    while m <= upper_limit:
        yield m
        m += number


def multiples_by_count(number, lower_limit, count, remainder):
    # This check is valid because we are dealing with only natural
    # numbers.
    if number <= remainder:
        return

    if lower_limit < number:
        lower_limit = number

    s = lower_limit - (lower_limit % number)
    m = s + remainder
    while m < lower_limit:
        m += number

    for i in range(count):
        yield m
        m += number


def main():
    parser = argparse.ArgumentParser(description='generate multiples of a number')
    parser.add_argument(
        'number',
        help='number whose multiples to generate',
        type=int,
    )
    parser.add_argument(
        '-l', '--lower-limit',
        help='lower limit of output numbers',
        type=int,
    )
    parser.add_argument(
        '-r', '--remainder',
        help='generate "multiples" that yield this remainder',
        type=int,
    )
    num_multiples_group = parser.add_mutually_exclusive_group()
    num_multiples_group.add_argument(
        '-c', '--count',
        help='number of multiples',
        type=int,
    )
    num_multiples_group.add_argument(
        '-u', '--upper-limit',
        help='upper limit of output numbers',
        type=int,
    )
    args = parser.parse_args()

    number = args.number
    if number <= 0:
        print(f"number: want non-zero natural number, got {number}", file=sys.stderr)
        return 1

    remainder = 0
    if args.remainder is not None:  # Treat None and 0 differently.
        remainder = args.remainder
        if remainder < 0:
            print(f"remainder: want natural number, got {remainder}", file=sys.stderr)
            return 1

    lower_limit = 1
    if args.lower_limit is not None:
        lower_limit = args.lower_limit
        if lower_limit <= 0:
            print(f"lower limit: want non-zero natural number, got {lower_limit}", file=sys.stderr)
            return 1

    count = args.count
    if count is not None:  # Treat None and 0 differently.
        if count <= 0:
            print(f"count: want non-zero natural number, got {count}", file=sys.stderr)
            return 1
        for x in multiples_by_count(number, lower_limit, count, remainder):
            print(x)
        return 0

    upper_limit = args.upper_limit
    if upper_limit is not None:  # Treat None and 0 differently.
        if upper_limit <= 0:
            print(f"upper limit: want non-zero natural number, got {upper_limit}", file=sys.stderr)
            return 1
        elif upper_limit <= lower_limit:
            print(
                f"limits: want upper > lower, got {upper_limit}, {lower_limit}, respectively",
                file=sys.stderr,
            )
            return 1
        for x in multiples_by_upper_limit(number, lower_limit, upper_limit, remainder):
            print(x)
        return 0

    # Both count and upper_limit are None.  Default to 10 multiples.
    for x in multiples_by_count(number, lower_limit, 10, remainder):
        print(x)
    return 0


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print(f"Interrupted", file=sys.stderr)
